--TASK 3564

-- Write a solution to find the most popular product category for each season. The seasons are defined as:
-- Winter: December, January, February
-- Spring: March, April, May
-- Summer: June, July, August
-- Fall: September, October, November
-- The popularity of a category is determined by the total quantity sold in that season. If there is a tie, 
-- select the category with the highest total revenue (quantity Ã— price).
-- Return the result table ordered by season in ascending order.
-- The result format is in the following example.

-- Example:
-- Input:
-- sales table:
-- +---------+------------+------------+----------+-------+
-- | sale_id | product_id | sale_date  | quantity | price |
-- +---------+------------+------------+----------+-------+
-- | 1       | 1          | 2023-01-15 | 5        | 10.00 |
-- | 2       | 2          | 2023-01-20 | 4        | 15.00 |
-- | 3       | 3          | 2023-03-10 | 3        | 18.00 |
-- | 4       | 4          | 2023-04-05 | 1        | 20.00 |
-- | 5       | 1          | 2023-05-20 | 2        | 10.00 |
-- | 6       | 2          | 2023-06-12 | 4        | 15.00 |
-- | 7       | 5          | 2023-06-15 | 5        | 12.00 |
-- | 8       | 3          | 2023-07-24 | 2        | 18.00 |
-- | 9       | 4          | 2023-08-01 | 5        | 20.00 |
-- | 10      | 5          | 2023-09-03 | 3        | 12.00 |
-- | 11      | 1          | 2023-09-25 | 6        | 10.00 |
-- | 12      | 2          | 2023-11-10 | 4        | 15.00 |
-- | 13      | 3          | 2023-12-05 | 6        | 18.00 |
-- | 14      | 4          | 2023-12-22 | 3        | 20.00 |
-- | 15      | 5          | 2024-02-14 | 2        | 12.00 |
-- +---------+------------+------------+----------+-------+
-- products table:
-- +------------+-----------------+----------+
-- | product_id | product_name    | category |
-- +------------+-----------------+----------+
-- | 1          | Warm Jacket     | Apparel  |
-- | 2          | Designer Jeans  | Apparel  |
-- | 3          | Cutting Board   | Kitchen  |
-- | 4          | Smart Speaker   | Tech     |
-- | 5          | Yoga Mat        | Fitness  |
-- +------------+-----------------+----------+
-- Output:
-- +---------+----------+----------------+---------------+
-- | season  | category | total_quantity | total_revenue |
-- +---------+----------+----------------+---------------+
-- | Fall    | Apparel  | 10             | 120.00        |
-- | Spring  | Kitchen  | 3              | 54.00         |
-- | Summer  | Tech     | 5              | 100.00        |
-- | Winter  | Apparel  | 9              | 110.00        |
-- +---------+----------+----------------+---------------+


--------------------------------SOLUTION(1): [CTE + NOT EXIST]
WITH months AS (
    SELECT 
        CASE 
            WHEN DATEPART(month, sale_date) BETWEEN 3 AND 5 THEN 'Spring'
            WHEN DATEPART(month, sale_date) BETWEEN 6 AND 8 THEN 'Summer'
            WHEN DATEPART(month, sale_date) BETWEEN 9 AND 11 THEN 'Fall'
            WHEN DATEPART(month, sale_date) IN (1,2,12) THEN 'Winter'
        END AS season,
        s.sale_id,
        s.product_id,
        s.quantity,
        s.price
    FROM sales s
),
connection AS (
    SELECT m.season, p.category, m.quantity, m.price
    FROM months m
    JOIN products p ON m.product_id = p.product_id
),
category_stats AS (
    SELECT 
        season,
        category,
        SUM(quantity) AS total_quantity,
        ROUND(SUM(quantity * price), 2) AS total_revenue
    FROM connection
    GROUP BY season, category
),
season_max_quantity AS (
    SELECT 
        season,
        MAX(total_quantity) AS max_qty
    FROM category_stats
    GROUP BY season
)
SELECT cs.season, cs.category, cs.total_quantity, cs.total_revenue
FROM category_stats cs
JOIN season_max_quantity smq ON cs.season = smq.season AND cs.total_quantity = smq.max_qty
WHERE NOT EXISTS (
    SELECT 1 
    FROM category_stats x
    WHERE x.season = cs.season
        AND x.total_quantity = cs.total_quantity
        AND x.total_revenue > cs.total_revenue
)
--------------------------------SOLUTION(2): [CTE + ROW_NUMER]
WITH months AS (
    SELECT 
        CASE 
            WHEN DATEPART(month, sale_date) BETWEEN 3 AND 5 THEN 'Spring'
            WHEN DATEPART(month, sale_date) BETWEEN 6 AND 8 THEN 'Summer'
            WHEN DATEPART(month, sale_date) BETWEEN 9 AND 11 THEN 'Fall'
            WHEN DATEPART(month, sale_date) IN (1,2,12) THEN 'Winter'
        END AS season,
        s.sale_id,
        s.product_id,
        s.quantity,
        s.price
    FROM sales s
),
connection AS (
    SELECT m.season, p.category, m.quantity, m.price
    FROM months m
    JOIN products p ON m.product_id = p.product_id
),
category_stats AS (
    SELECT 
        season,
        category,
        SUM(quantity) AS total_quantity,
        ROUND(SUM(quantity * price), 2) AS total_revenue
    FROM connection
    GROUP BY season, category
),
ranked AS (
    SELECT 
        season,
        category,
        total_quantity,
        total_revenue,
        ROW_NUMBER() OVER ( PARTITION BY season ORDER BY total_quantity DESC, total_revenue DESC) AS rn
    FROM category_stats
)
SELECT 
    season,
    category,
    total_quantity,
    total_revenue
FROM ranked
WHERE rn = 1
