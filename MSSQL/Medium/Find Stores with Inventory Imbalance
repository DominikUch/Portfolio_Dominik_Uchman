--TASK 3626.

-- Write a solution to find stores that have inventory imbalance - stores where the most expensive product has lower stock than the cheapest product.
-- For each store, identify the most expensive product (highest price) and its quantity
-- For each store, identify the cheapest product (lowest price) and its quantity
-- A store has inventory imbalance if the most expensive product's quantity is less than the cheapest product's quantity
-- Calculate the imbalance ratio as (cheapest_quantity / most_expensive_quantity)
-- Round the imbalance ratio to 2 decimal places
-- Only include stores that have at least 3 different products
-- Return the result table ordered by imbalance ratio in descending order, then by store name in ascending order.
-- The result format is in the following example.

-- Example:
-- Input:
-- stores table:
-- +----------+----------------+-------------+
-- | store_id | store_name     | location    |
-- +----------+----------------+-------------+
-- | 1        | Downtown Tech  | New York    |
-- | 2        | Suburb Mall    | Chicago     |
-- | 3        | City Center    | Los Angeles |
-- | 4        | Corner Shop    | Miami       |
-- | 5        | Plaza Store    | Seattle     |
-- +----------+----------------+-------------+
-- inventory table:
-- +--------------+----------+--------------+----------+--------+
-- | inventory_id | store_id | product_name | quantity | price  |
-- +--------------+----------+--------------+----------+--------+
-- | 1            | 1        | Laptop       | 5        | 999.99 |
-- | 2            | 1        | Mouse        | 50       | 19.99  |
-- | 3            | 1        | Keyboard     | 25       | 79.99  |
-- | 4            | 1        | Monitor      | 15       | 299.99 |
-- | 5            | 2        | Phone        | 3        | 699.99 |
-- | 6            | 2        | Charger      | 100      | 25.99  |
-- | 7            | 2        | Case         | 75       | 15.99  |
-- | 8            | 2        | Headphones   | 20       | 149.99 |
-- | 9            | 3        | Tablet       | 2        | 499.99 |
-- | 10           | 3        | Stylus       | 80       | 29.99  |
-- | 11           | 3        | Cover        | 60       | 39.99  |
-- | 12           | 4        | Watch        | 10       | 299.99 |
-- | 13           | 4        | Band         | 25       | 49.99  |
-- | 14           | 5        | Camera       | 8        | 599.99 |
-- | 15           | 5        | Lens         | 12       | 199.99 |
-- +--------------+----------+--------------+----------+--------+
-- Output:
-- +----------+----------------+-------------+------------------+--------------------+------------------+
-- | store_id | store_name     | location    | most_exp_product | cheapest_product   | imbalance_ratio  |
-- +----------+----------------+-------------+------------------+--------------------+------------------+
-- | 3        | City Center    | Los Angeles | Tablet           | Stylus             | 40.00            |
-- | 1        | Downtown Tech  | New York    | Laptop           | Mouse              | 10.00            |
-- | 2        | Suburb Mall    | Chicago     | Phone            | Case               | 25.00            |
-- +----------+----------------+-------------+------------------+--------------------+------------------+


------------------------SOLUTION(1):
--Wyznacz sklepy, które mają >= 3 różne produkty 
--i znajdź ich maksymalną i minimalną cenę
WITH process_1 AS (
    SELECT 
        i.store_id, 
        s.store_name, 
        s.location, 
        MAX(i.price) AS max_price, 
        MIN(i.price) AS min_price
    FROM inventory i
    INNER JOIN stores s ON i.store_id = s.store_id
    GROUP BY i.store_id, s.store_name, s.location
    HAVING COUNT(DISTINCT i.product_name) > 2
),
-- Pobierz tylko produkty o cenie równej max_price lub min_price w danym sklepie
process_2 AS (
    SELECT 
        i.store_id, 
        p.store_name, 
        p.location, 
        i.quantity, 
        i.product_name, 
        i.price
    FROM inventory i
    INNER JOIN process_1 p ON i.store_id = p.store_id  AND (i.price = p.max_price OR i.price = p.min_price)
)
-- Połącz najtańszy i najdroższy produkt w sklepie, 
-- oblicz współczynnik nierównowagi tylko gdy drogi produkt ma mniejszą ilość
SELECT 
    p.store_id, 
    p.store_name, 
    p.location, 
    p1.product_name AS most_exp_product, 
    p.product_name AS cheapest_product, 
    ROUND(1.0 * p.quantity / p1.quantity, 2) AS imbalance_ratio
FROM process_2 p
INNER JOIN process_2 p1 ON p.store_id = p1.store_id 
   AND p.price < p1.price            -- p = najtańszy, p1 = najdroższy
   AND p1.quantity < p.quantity      -- tylko sklepy z nierównowagą
ORDER BY imbalance_ratio DESC, p.store_name;


------------------------SOLUTION(2):
WITH ValidStores AS (
    SELECT
        store_id,
        MAX(price) AS max_price,
        MIN(price) AS min_price
    FROM Inventory
    GROUP BY store_id
    HAVING COUNT(1) >= 3
)
SELECT
    s.store_id, s.store_name, s.location,
    i_exp.product_name AS most_exp_product,
    i_cheap.product_name AS cheapest_product,
    ROUND(1.0 * i_cheap.quantity / i_exp.quantity, 2) AS imbalance_ratio
FROM ValidStores vs
    JOIN Inventory i_exp ON i_exp.store_id = vs.store_id AND i_exp.price = vs.max_price
    JOIN Inventory i_cheap ON i_cheap.store_id = vs.store_id AND i_cheap.price = vs.min_price
    JOIN Stores s ON s.store_id = vs.store_id
WHERE i_exp.quantity < i_cheap.quantity
ORDER BY imbalance_ratio DESC, store_name ASC
