--TASK 1341

-- Write a solution to:
-- Find the name of the user who has rated the greatest number of movies. In case of a tie, return the lexicographically smaller user name.
-- Find the movie name with the highest average rating in February 2020. In case of a tie, return the lexicographically smaller movie name.
-- The result format is in the following example.

-- Example 1:
-- Input: 
-- Movies table:
-- +-------------+--------------+
-- | movie_id    |  title       |
-- +-------------+--------------+
-- | 1           | Avengers     |
-- | 2           | Frozen 2     |
-- | 3           | Joker        |
-- +-------------+--------------+
-- Users table:
-- +-------------+--------------+
-- | user_id     |  name        |
-- +-------------+--------------+
-- | 1           | Daniel       |
-- | 2           | Monica       |
-- | 3           | Maria        |
-- | 4           | James        |
-- +-------------+--------------+
-- MovieRating table:
-- +-------------+--------------+--------------+-------------+
-- | movie_id    | user_id      | rating       | created_at  |
-- +-------------+--------------+--------------+-------------+
-- | 1           | 1            | 3            | 2020-01-12  |
-- | 1           | 2            | 4            | 2020-02-11  |
-- | 1           | 3            | 2            | 2020-02-12  |
-- | 1           | 4            | 1            | 2020-01-01  |
-- | 2           | 1            | 5            | 2020-02-17  | 
-- | 2           | 2            | 2            | 2020-02-01  | 
-- | 2           | 3            | 2            | 2020-03-01  |
-- | 3           | 1            | 3            | 2020-02-22  | 
-- | 3           | 2            | 4            | 2020-02-25  | 
-- +-------------+--------------+--------------+-------------+
-- Output: 
-- +--------------+
-- | results      |
-- +--------------+
-- | Daniel       |
-- | Frozen 2     |
-- +--------------+

--SOLUTION:
SELECT 
    results 
FROM (
    -- Subquery for top user
    SELECT TOP(1)
        U.name AS results 
    FROM Users U 
        INNER JOIN MovieRating M ON U.user_id = M.user_id
    GROUP BY U.name
    ORDER BY COUNT(M.movie_id) DESC, U.name

    UNION ALL

    -- Subquery for top movie
    SELECT TOP(1)
        M.title AS results 
    FROM Movies M 
        INNER JOIN MovieRating MR ON M.movie_id = MR.movie_id
    where created_at <'2020-03-1' and created_at >='2020-02-1'
    GROUP BY M.title
    ORDER BY AVG(CAST(MR.rating AS float)) DESC, M.title
) t;
