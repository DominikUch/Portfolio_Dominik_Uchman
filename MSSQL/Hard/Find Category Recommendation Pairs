--TASK 3554

-- Amazon wants to understand shopping patterns across product categories. Write a solution to:
-- Find all category pairs (where category1 < category2)
-- For each category pair, determine the number of unique customers who purchased products from both categories
-- A category pair is considered reportable if at least 3 different customers have purchased products from both categories.
-- Return the result table of reportable category pairs ordered by customer_count in descending order, and in case of a tie,
-- by category1 in ascending order lexicographically, and then by category2 in ascending order.
-- The result format is in the following example.

-- Example:
-- Input:
-- ProductPurchases table:
-- +---------+------------+----------+
-- | user_id | product_id | quantity |
-- +---------+------------+----------+
-- | 1       | 101        | 2        |
-- | 1       | 102        | 1        |
-- | 1       | 201        | 3        |
-- | 1       | 301        | 1        |
-- | 2       | 101        | 1        |
-- | 2       | 102        | 2        |
-- | 2       | 103        | 1        |
-- | 2       | 201        | 5        |
-- | 3       | 101        | 2        |
-- | 3       | 103        | 1        |
-- | 3       | 301        | 4        |
-- | 3       | 401        | 2        |
-- | 4       | 101        | 1        |
-- | 4       | 201        | 3        |
-- | 4       | 301        | 1        |
-- | 4       | 401        | 2        |
-- | 5       | 102        | 2        |
-- | 5       | 103        | 1        |
-- | 5       | 201        | 2        |
-- | 5       | 202        | 3        |
-- +---------+------------+----------+
-- ProductInfo table:
-- +------------+-------------+-------+
-- | product_id | category    | price |
-- +------------+-------------+-------+
-- | 101        | Electronics | 100   |
-- | 102        | Books       | 20    |
-- | 103        | Books       | 35    |
-- | 201        | Clothing    | 45    |
-- | 202        | Clothing    | 60    |
-- | 301        | Sports      | 75    |
-- | 401        | Kitchen     | 50    |
-- +------------+-------------+-------+
-- Output:
-- +-------------+-------------+----------------+
-- | category1   | category2   | customer_count |
-- +-------------+-------------+----------------+
-- | Books       | Clothing    | 3              |
-- | Books       | Electronics | 3              |
-- | Clothing    | Electronics | 3              |
-- | Electronics | Sports      | 3              |
-- +-------------+-------------+----------------+


----------------------------SOLUTION(1) : [CTE]
WITH format_product AS (
	SELECT
      user_id,
      category
	FROM ProductPurchases p
	    JOIN ProductInfo p1 ON p.product_id = p1.product_id
), 
main_proccess AS (
	SELECT
        P.category AS category1,
        P1.category AS category2,
        COUNT( DISTINCT P.user_id ) AS customer_count 
	FROM format_product P 
        JOIN format_product P1 ON P.category < P1.category AND P.user_id = P1.user_id
	GROUP BY P.category, P1.category
	HAVING(COUNT(DISTINCT P.user_id)) > 2
)
SELECT
    category1,
    category2,
    customer_count
FROM main_proccess M
ORDER BY customer_count DESC, category1, category2


----------------------------SOLUTION(2) : [CTE V2]
WITH pairs AS (
	SELECT 
		P1.product_id AS Pro1,
        P1.category AS category1 ,
        P2.product_id AS Pro2,
        P2.category AS category2
	FROM ProductInfo P1
		jOIN ProductInfo P2 ON P1.category < P2.category
)
SELECT 
	category1,
    category2,
    COUNT(DISTINCT P1.user_id) customer_count 
FROM pairs C
    JOIN ProductPurchases P1 ON C.Pro1 = P1.product_id
    JOIN ProductPurchases P2 ON C.Pro2 = P2.product_id
WHERE P1.user_id = P2.user_id
GROUP BY category1,category2
HAVING COUNT(DISTINCT P1.user_id) >=3
ORDER BY COUNT(DISTINCT P1.user_id) DESC,category1,category2


----------------------------SOLUTION(3) : [ADVANCED QUERY]
SELECT
    c1.category AS category1,
    c2.category AS category2,
COUNT(DISTINCT p.user_id) AS customer_count
FROM ProductPurchases p
    JOIN ProductPurchases p1 ON p1.user_id = p.user_id
    JOIN ProductInfo c1 ON p.product_id = c1.product_id
    JOIN ProductInfo c2 ON p1.product_id = c2.product_id
WHERE c1.category < c2.category
GROUP BY c1.category, c2.category
HAVING COUNT(DISTINCT p.user_id) >= 3
ORDER BY customer_count DESC, category1, category2
