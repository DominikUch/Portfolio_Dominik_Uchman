--TASK 501

-- Write a solution to display the records with three or more rows with consecutive id's, and the number of people is greater than or equal to 100 for each.
-- Return the result table ordered by visit_date in ascending order.
-- The result format is in the following example.

-- Example 1:
-- Input: 
-- Stadium table:
-- +------+------------+-----------+
-- | id   | visit_date | people    |
-- +------+------------+-----------+
-- | 1    | 2017-01-01 | 10        |
-- | 2    | 2017-01-02 | 109       |
-- | 3    | 2017-01-03 | 150       |
-- | 4    | 2017-01-04 | 99        |
-- | 5    | 2017-01-05 | 145       |
-- | 6    | 2017-01-06 | 1455      |
-- | 7    | 2017-01-07 | 199       |
-- | 8    | 2017-01-09 | 188       |
-- +------+------------+-----------+
-- Output: 
-- +------+------------+-----------+
-- | id   | visit_date | people    |
-- +------+------------+-----------+
-- | 5    | 2017-01-05 | 145       |
-- | 6    | 2017-01-06 | 1455      |
-- | 7    | 2017-01-07 | 199       |
-- | 8    | 2017-01-09 | 188       |
-- +------+------------+-----------+

--------------------SOLUTION(1): (CTE TABLE)
WITH tab1 as (
    SELECT 
        s1.id as ONE, 
        s2.id as TWO, 
        s3.id as THREE
    FROM Stadium s1
    JOIN Stadium s2 on s1.id = s2.id -1
    JOIN Stadium s3 on s2.id = S3.id -1
    AND (s1.people >= 100 AND s2.people >= 100 AND s3.people >= 100)
),
tab2 as (
    SELECT ONE from tab1
    union

    SELECT TWO from tab1
    union

    SELECT THREE from tab1
)

SELECT * FROM Stadium
WHERE id in (SELECT * FROM tab2)
order by visit_date


--------------------SOLUTION(2): (LEAD, LAG)
WITH base AS (
    SELECT *,
           LEAD(id, 1) OVER (ORDER BY id) AS next_id,
           LEAD(id, 2) OVER (ORDER BY id) AS second_next_id,
           LAG(id, 1) OVER (ORDER BY id) AS last_id,
           LAG(id, 2) OVER (ORDER BY id) AS second_last_id
    FROM stadium
    WHERE people >= 100
)
SELECT DISTINCT id, visit_date, people
FROM base
WHERE (next_id - id = 1 AND id - last_id = 1)
   OR (second_next_id - next_id = 1 AND next_id - id = 1)
   OR (id - last_id = 1 AND last_id - second_last_id = 1)
ORDER BY visit_date;

